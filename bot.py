import telebot
from telebot import types
from keep_alive import keep_alive
import json

bot = telebot.TeleBot(os.environ['BOT_TOKEN'])
ADMIN_ID = int(os.environ['ADMIN_ID'])
user_states = {}

FEEDBACK_FILE = "feedbacks.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
try:
    with open(FEEDBACK_FILE, "r", encoding="utf-8") as f:
        feedbacks = json.load(f)
except FileNotFoundError:
    feedbacks = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
def save_feedbacks_to_file():
    with open(FEEDBACK_FILE, "w", encoding="utf-8") as f:
        json.dump(feedbacks, f, ensure_ascii=False, indent=4)

prices = {
    "1000 V-Bucks": 600,
    "2000 V-Bucks": 1100,
    "2800 V-Bucks": 1350,
    "3000 V-Bucks": 1450,
    "3800 V-Bucks": 1700,
    "4000 V-Bucks": 1850,
    "4800 V-Bucks": 2100,
    "5000 V-Bucks": 2250,
    "5800 V-Bucks": 2500,
    "6000 V-Bucks": 2650,
    "6800 V-Bucks": 2900,
    "7000 V-Bucks": 3300,
    "7800 V-Bucks": 3500,
    "8000 V-Bucks": 3600,
    "8800 V-Bucks": 3800,
    "9000 V-Bucks": 4000,
    "9800 V-Bucks": 4200,
    "10000 V-Bucks": 4400,
    "10800 V-Bucks": 4600,
    "11000 V-Bucks": 4800,
    "11800 V-Bucks": 5000,
    "12000 V-Bucks": 5200,
    "12800 V-Bucks": 5400,
    "13000 V-Bucks": 5600,
    "13500 V-Bucks": 5800,
    "27000 V-Bucks": 10500,
    "40500 V-Bucks": 14500,
    "54000 V-Bucks": 18500,
    "108000 V-Bucks": 36500
}

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("/start", "–û—Ç–∑—ã–≤—ã")
    for item in prices:
        markup.add(item)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ V-Bucks –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –æ—Ç–∑—ã–≤—ã.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text in prices)
def handle_selection(message):
    amount = message.text
    price = prices[amount]
    bot.send_message(message.chat.id, f"{amount} —Å—Ç–æ–∏—Ç {price}‚ÇΩ.\n–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã: 2200700536853491\n–ü–æ—Å–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã.")

@bot.message_handler(content_types=['photo'])
def handle_payment_photo(message):
    bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Epic Games.")
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    user_states[message.from_user.id] = "waiting_credentials"

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "waiting_credentials")
def handle_credentials(message):
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    bot.send_message(ADMIN_ID, f"–î–∞–Ω–Ω—ã–µ –æ—Ç @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}: {message.text}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥", callback_data=f"request_code_{message.from_user.id}"))
    bot.send_message(ADMIN_ID, "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)

    user_states[message.from_user.id] = "waiting_code_request"

@bot.callback_query_handler(func=lambda call: call.data.startswith("request_code_"))
def request_code_from_user(call):
    if call.from_user.id != ADMIN_ID:
        return
    user_id = int(call.data.split("_")[2])
    bot.send_message(user_id, "–í–∞–º –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å: –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª –Ω–∞ –ø–æ—á—Ç—É.")
    user_states[user_id] = "waiting_code"

@bot.message_handler(func=lambda m: m.text.isdigit() and len(m.text) == 6 and user_states.get(m.from_user.id) == "waiting_code")
def receive_user_code(message):
    bot.send_message(message.chat.id, "–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
    bot.send_message(ADMIN_ID, f"6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –æ—Ç @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}: {message.text}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ ‚úÖ", callback_data=f"done_{message.from_user.id}"))
    bot.send_message(ADMIN_ID, "–ù–∞–∂–º–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=markup)

    user_states[message.from_user.id] = "code_received"

@bot.callback_query_handler(func=lambda call: call.data.startswith("done_"))
def send_confirm_button(call):
    if call.from_user.id != ADMIN_ID:
        return
    user_id = int(call.data.split("_")[1])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚úÖ", callback_data=f"confirm_{user_id}"))
    bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_delivery(call):
    user_id = int(call.data.split("_")[1])
    if call.from_user.id != user_id:
        return
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤.")
    user_states[user_id] = "awaiting_feedback"

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "awaiting_feedback")
def save_feedback(message):
    feedbacks[str(message.from_user.id)] = {
        "username": message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞",
        "text": message.text
    }
    save_feedbacks_to_file()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    user_states[message.from_user.id] = None

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–∑—ã–≤—ã" —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
@bot.message_handler(func=lambda m: m.text == "–û—Ç–∑—ã–≤—ã")
def show_reviews(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"write_feedback_{message.from_user.id}"))

    if not feedbacks:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=markup)
    else:
        text = "\n\n".join([f"–û—Ç @{f['username']}:\n{f['text']}" for f in feedbacks.values()])
        bot.send_message(message.chat.id, text, reply_markup=markup)

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
    if message.from_user.id == ADMIN_ID:
        admin_markup = types.InlineKeyboardMarkup()
        for uid, f in feedbacks.items():
            admin_markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç @{f['username']}", callback_data=f"del_{uid}"))
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤:", reply_markup=admin_markup)

# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
@bot.callback_query_handler(func=lambda call: call.data.startswith("write_feedback_"))
def write_feedback(call):
    user_id = int(call.data.split("_")[2])
    if call.from_user.id != user_id:
        return
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    user_states[user_id] = "awaiting_feedback"

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_"))
def delete_review(call):
    if call.from_user.id != ADMIN_ID:
        return
    user_id = call.data.split("_")[1]
    if feedbacks.pop(user_id, None):
        save_feedbacks_to_file()
        bot.send_message(call.message.chat.id, "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(call.message.chat.id, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ keep_alive
keep_alive()
bot.polling(none_stop=True)
